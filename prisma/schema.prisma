// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  coverImage    String?
  birthDate     DateTime?
  bio           String?   @db.Text
  slug          String    @unique
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  posts       Post[]
  comments    Comment[]
  discussions Discussion[]
  messages    Message[]
  likes       Like[]
  bookmarks   Post[]       @relation("bookmarks")
  followers   Follow[]     @relation("following")
  following   Follow[]     @relation("follower")
  Bookmark    Bookmark[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  type      String // 'study' ou 'regular'
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id])
  authorId     String
  comments     Comment[]
  likes        Like[]
  bookmarkedBy User[]        @relation("bookmarks")
  tags         Tag[]
  TagsOnPosts  TagsOnPosts[]
  Bookmark     Bookmark[]
}

model Discussion {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  closed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User                @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  tags      TagsOnDiscussions[]
}

model Comment {
  id           String   @id @default(cuid())
  content      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  postId       String
  discussionId String?

  user       User        @relation(fields: [userId], references: [id])
  post       Post        @relation(fields: [postId], references: [id])
  likes      Like[]
  Discussion Discussion? @relation(fields: [discussionId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String
}

model Tag {
  id                String              @id @default(cuid())
  name              String              @unique
  posts             Post[]
  TagsOnPosts       TagsOnPosts[]
  TagsOnDiscussions TagsOnDiscussions[]
}

model TagsOnPosts {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model TagsOnDiscussions {
  discussionId String
  tagId        String

  discussion Discussion @relation(fields: [discussionId], references: [id])
  tag        Tag        @relation(fields: [tagId], references: [id])

  @@id([discussionId, tagId])
}

model Like {
  id           String   @id @default(cuid())
  discussionId String?
  userId       String
  postId       String?
  commentId    String?
  createdAt    DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id])
  post       Post?       @relation(fields: [postId], references: [id])
  comment    Comment?    @relation(fields: [commentId], references: [id])
  Discussion Discussion? @relation(fields: [discussionId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId       String
  postId       String?
  discussionId String?

  user       User        @relation(fields: [userId], references: [id])
  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  discussion Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, discussionId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  createdAt   DateTime @default(now())
  followingId String

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
